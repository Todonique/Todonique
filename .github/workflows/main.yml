name: "Todonique Deployment Pipeline"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform AWS Setup"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: "Terraform Init"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init -backend-config="backend.config"

      - name: "Create terraform.tfvars"
        run: |
          echo 'db_password = "${{ secrets.DB_PASSWORD }}"' > terraform.tfvars
          echo 'db_username = "${{ secrets.DB_USERNAME }}"' >> terraform.tfvars
          echo 'db_name = "${{ secrets.DB_NAME }}"' >> terraform.tfvars
          echo 'backend_bucket = "${{ secrets.BUCKET_NAME }}"' >> terraform.tfvars
          echo 'backend_key = "${{ secrets.BACKEND_KEY }}"' >> terraform.tfvars
          echo 'project_name = "${{ secrets.PROJECT_NAME }}"' >> terraform.tfvars

      - name: "Terraform Validate"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform validate

      - name: "Terraform Apply"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve

  migrate:
    name: "Run Flyway Migrations"
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Run Flyway migrations"
        run: |
          echo "Running Flyway migrations..."
          docker run --rm flyway/flyway:latest -v
          echo "Attempting database connection..."
          docker run --rm \
            -v $(pwd):/flyway/sql \
            flyway/flyway:latest \
            -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
            -user=${{ secrets.DB_USERNAME }} \
            -password=${{ secrets.DB_PASSWORD }} \
            -connectRetries=3 \
            -connectRetriesInterval=10 \
            info
          echo "Running migrations..."
          docker run --rm \
            -v $(pwd):/flyway/sql \
            flyway/flyway:latest \
            -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
            -user=${{ secrets.DB_USERNAME }} \
            -password=${{ secrets.DB_PASSWORD }} \
            -connectRetries=3 \
            -connectRetriesInterval=10 \
            -locations=filesystem:/flyway/sql/flyway/migrations \
            migrate

  deploy:
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
 
      - name: Install Vercel CLI
        run: npm install --global vercel
 
      - name: Deploy to Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          vercel pull --yes --environment=production --token=$VERCEL_TOKEN
          vercel build --prod --token=$VERCEL_TOKEN
          vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN