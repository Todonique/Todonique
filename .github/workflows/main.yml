name: "Todonique Deployment Pipeline"

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    name: "Terraform AWS Setup"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Set up Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: "Terraform Init"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform init -backend-config="backend.config"

      - name: "Create terraform.tfvars"
        run: |
          echo 'db_password = "${{ secrets.DB_PASSWORD }}"' > terraform.tfvars
          echo 'db_username = "${{ secrets.DB_USERNAME }}"' >> terraform.tfvars
          echo 'db_name = "${{ secrets.DB_NAME }}"' >> terraform.tfvars
          echo 'backend_bucket = "${{ secrets.BUCKET_NAME }}"' >> terraform.tfvars
          echo 'backend_key = "${{ secrets.BACKEND_KEY }}"' >> terraform.tfvars
          echo 'project_name = "${{ secrets.PROJECT_NAME }}"' >> terraform.tfvars

      - name: "Terraform Validate"
        run: terraform validate

      - name: "Terraform Apply"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: terraform apply -auto-approve

  migrate:
    name: "Run Flyway Migrations"
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Run Flyway migrations"
        run: |
          echo "Running Flyway migrations..."
          docker run --rm flyway/flyway:latest -v
          echo "Attempting database connection..."
          docker run --rm \
            -v $(pwd):/flyway/sql \
            flyway/flyway:latest \
            -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
            -user=${{ secrets.DB_USERNAME }} \
            -password=${{ secrets.DB_PASSWORD }} \
            -connectRetries=3 \
            -connectRetriesInterval=10 \
            info
          echo "Running migrations..."
          docker run --rm \
            -v $(pwd):/flyway/sql \
            flyway/flyway:latest \
            -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
            -user=${{ secrets.DB_USERNAME }} \
            -password=${{ secrets.DB_PASSWORD }} \
            -connectRetries=3 \
            -connectRetriesInterval=10 \
            -locations=filesystem:/flyway/sql/flyway/migrations \
            migrate

  deploy:
    name: "Deploy to EC2"
    runs-on: ubuntu-latest
    needs: migrate
    steps:
      - name: "Checkout Code"
        uses: actions/checkout@v4

      - name: "Deploy and Restart Server"
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Navigate to app
            cd /home/ubuntu/todonique-app/server

            # Reset changes and pull latest
            git reset --hard HEAD
            git pull origin main

            # Create .env file
            cat > .env << EOF
            BASE_URL=${{ secrets.BASE_URL }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USERNAME }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            PORT=${{ secrets.PORT }}
            NODE_ENV=production
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            ALLOWED_ORIGINS=${{ secrets.ALLOWED_ORIGINS }}
            EOF

            npm install
            npm run build

            # Restart app with PM2
            cd ../..
            pm2 restart todonique-app || pm2 start server/dist/server.js --name "todonique-app"

            # Set domain variable
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            if [ -z "$DOMAIN_NAME" ]; then
              echo "DOMAIN_NAME is empty. Aborting nginx config."
              exit 1
            fi

            # Update nginx config safely
            sudo tee /etc/nginx/sites-available/default > /dev/null <<EOF
            server {
                listen 80;
                server_name $DOMAIN_NAME www.$DOMAIN_NAME;
                return 301 https://\$host\$request_uri;
            }
            server {
                listen 443 ssl http2;
                server_name $DOMAIN_NAME www.$DOMAIN_NAME;

                ssl_certificate /etc/letsencrypt/live/$DOMAIN_NAME/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/$DOMAIN_NAME/privkey.pem;

              location / {
                  proxy_pass http://localhost:${{ secrets.PORT }};
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
                  proxy_cache_bypass \$http_upgrade;
              }
            }
            EOF

            # Test and restart nginx
            sudo nginx -t
            sudo systemctl restart nginx
